package com.company;

public class Merge  {

    public static void Merge_sort_y_bubble_sort(String[] args) {
        int [] vector5 ={9,6,7,2,4};
        int[] vector20 = {20,50,65,32,4,5,6,79,100,321,8654,6545,6454,642221,645479,978,9754,97978,42216,23};
        int[] vector200 = {646,5,23,3,1,6,4,9,664,64,231,315,97,89,978,954,547,985,654,512,32156,646,8984,9854,9521,648,9849,97942,9485599,549549
                ,9499,9495459,95421,94549,545942,36464,979789,74546,4945,6452,89792,16168,94549,84945,894954,95453,123138919,19192,9498,664549,949,799,451,100,62,6216,85,74,93,
                126,616,612,3221,332,654,898,9221,232,313,3164,64613,642,645,46,585,2564,89,64,621,3587,651,5,4,3,2,1,6564,94,79,754,21,32,65,46,85,98,54,12,32,65,98,78,21
                ,21,1231,313,32156,646,8984,9854,9521,648,9849,97942,9485599,549549,9499,9495459,95421,94549,545942,36464,979789,74546,4945,6452,89792,16168,94549,84945,894954,95453,123138919,19192,9498,664549,949,799,451,100,62,6216,85,74,93, 126,616,612,3221,332,654,898,9221,232,313,3164,64613,642,645,46,585,2564,89,64,621,3587,651,5,4,3,2,1,6564,94,79,754,21,32,65,46,85,98,54,12,32,65,98,78,21,21,1231,313,131,64,47,97,945,62,31,646};
        int[] vector400 = {646,5,23,3,1,6,4,9,664,64,231,315,97,89,978,954,547,985,654,512,32156,646,8984,9854,9521,648,9849,97942,9485599,549549
                ,9499,9495459,95421,94549,545942,36464,979789,74546,4945,6452,89792,16168,94549,84945,894954,95453,123138919,19192,9498,664549,949,799,451,100,62,6216,85,74,93,
                126,616,612,3221,332,654,898,9221,232,313,3164,64613,642,645,46,585,2564,89,64,621,3587,651,5,4,3,2,1,6564,94,79,754,21,32,65,46,85,98,54,12,32,65,98,78,21
                ,21,1231,313,131,64,47,97,945,62,31,646,646,5,23,3,1,6,4,9,664,64,231,315,97,89,978,954,547,985,654,512,32156,646,8984,9854,9521,648,9849,97942,9485599,549549,9499,9495459,95421,94549,545942,36464,979789,74546,4945,6452,89792,16168,94549,84945,894954,95453,123138919,19192,9498,664549,949,799,451,100,62,6216,85,74,93, 126,616,612,3221,332,654,898,9221,232,313,3164,64613,642,645,46,585,2564,89,64,621,3587,651,5,4,3,2,1,6564,94,79,754,21,32,65,46,85,98,54,12,32,65,98,78,21,21,1231,313,131,64,47,97,945,62,31,646,
                646,5,23,3,1,6,4,9,664,64,231,315,97,89,978,954,547,985,654,512,32156,646,8984,9854,9521,648,9849,97942,9485599,549549
                ,9499,9495459,95421,94549,545942,36464,979789,74546,4945,6452,89792,16168,94549,84945,894954,95453,123138919,19192,9498,664549,949,799,451,100,62,6216,85,74,93,
                126,616,612,3221,332,654,898,9221,232,313,3164,64613,642,645,46,585,2564,89,64,621,3587,651,5,4,3,2,1,6564,94,79,754,21,32,65,46,85,98,54,12,32,65,98,78,21
                ,95453,123138919,19192,9498,664549,949,799,451,100,62,6216,85,74,93, 126,616,612,3221,332,654,898,9221,232,313,3164,64613,642,645,46,585,2564,89,64,621,3587,651,5,4,3,2,1,6564,94,79,754,21,32,65,46,85,98,54,12,32,65,98,78,21,21,1231,313,131,64,47,97,945,62,31,646};


        int[] arr = {1, 2, 3, 4, 5,6,7,8,9};
        Merge  m = new Merge ();
        long startTime = System.nanoTime();
        // intercambiar el tama単o del verctor
        arr = m.bubbleSort(vector400);
        long endTime = System.nanoTime() - startTime;

        System.out.println("Tiempo medido en un arreglo de tama単o " + vector400.length);
        System.out.println("tiempo en nano segundos Usando BubbleSort:" + endTime);
        int[] array = {1, 2, 3, 4, 5,6,7,8,9};
        Merge  t = new Merge ();
        long tiempoInicial = System.nanoTime();
        // intercambiar el tama単o del verctor
        array = t.mergeSort(vector400);
        long tiempoFinal = System.nanoTime() - tiempoInicial;

        System.out.println("Tiempo medido en un arreglo de tama単o " + vector400.length);
        System.out.println("tiempo en nano segundos usando MergeSort:" + tiempoFinal);
    }


    // Codigo del bubbleSort
    public int [] bubbleSort(int[]arr){
        for (int i = 0; i <arr.length ; i++) {
            for (int j = 0; j <arr.length ; j++) {
                if(arr[j]<arr[i]){
                    int temp = arr[j];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }
        return arr;
    }

    // a y b estan ordenados
    public int[] merge(int []a, int[]b){
        int [] c = new int[a.length + b.length];
        int j =0, k = 0, i;
        for (i = 0; i < c.length && j < a.length && k < b.length; i++) {
            if(a[j] < b[k]){
                c[i] = a[j++];
            }
            else{
                c[i] = b[k++];
            }

        }

        for(; i< c.length;i++){
            if(j<a.length){
                c[i] = a[j++];
            }
            if(k<b.length){
                if(k<b.length){
                    c[i] = b[k++];
                }
            }
        }


        return c;
    }

    public int [] mergeSort(int[] array){
        // caso base
        if(array.length == 1)
            return array;

        int[] parteInferior = new int[array.length/2];
        int[] parteSuperior = new int[array.length - parteInferior.length];
        int i = 0;

        for (; i < parteInferior.length; i++) {
            parteInferior[i] = array[i];
        }

        for (int j = 0; j < parteSuperior.length; j++) {
            parteSuperior[j] = array[i+j];
        }

        // parte recursiva del caso recursivo

        return merge(mergeSort(parteInferior), mergeSort(parteSuperior));

    }
}